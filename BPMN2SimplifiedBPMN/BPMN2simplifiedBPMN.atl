-- @nsuri SimplifiedBPMN=http://www.cpoubel.org/simplifiedbpmn
-- @nsuri BPMN=http://www.omg.org/spec/BPMN/20100524/MODEL

module BPMN2simplifiedBPMN;
create OUT : SimplifiedBPMN from IN : BPMN;

rule Process2Process {
	from
		in_process: BPMN!Process (in_process.flowElements->size() > 0)
		
	to
		out_process: SimplifiedBPMN!Process (
			flowElements <- in_process.flowElements,
			name <- in_process.id
		)
}

rule Task2Task {
	from
		in_task: BPMN!Task
	to
		out_task: SimplifiedBPMN!Task (
			outgoing <- in_task.outgoing,
			incoming <- in_task.incoming,
			boundaryEventRefs <- in_task.boundaryEventRefs,
			name <- in_task.name
		)
}

rule ANDGateway2ANDGateway {
	from
		in_gateway: BPMN!ParallelGateway
	to
		out_gateway: SimplifiedBPMN!ANDGateway (
			outgoing <- in_gateway.outgoing,
			incoming <- in_gateway.incoming,
			name <- in_gateway.name,
			gatewayDirection <- in_gateway.gatewayDirection
		)
}

rule XORGateway2XORGateway {
	from
		in_gateway: BPMN!ExclusiveGateway
	to
		out_gateway: SimplifiedBPMN!XORGateway (
			outgoing <- in_gateway.outgoing,
			incoming <- in_gateway.incoming,
			name <- in_gateway.name,
			gatewayDirection <- in_gateway.gatewayDirection
		)
}

rule ORGateway2ORGateway {
	from 
		in_gateway: BPMN!InclusiveGateway
	to
		out_gateway: SimplifiedBPMN!ORGateway (
			outgoing <- in_gateway.outgoing,
			incoming <- in_gateway.incoming,
			name <- in_gateway.name,
			gatewayDirection <- in_gateway.gatewayDirection
		)
}

rule SequenceFlow2SequenceFlow {
	from
		in_flow: BPMN!SequenceFlow
	to
		out_flow: SimplifiedBPMN!SequenceFlow (
			targetRef <- in_flow.targetRef,
			sourceRef <- in_flow.sourceRef
		)
}

rule StartEvent2StartEvent {
	from
		in_start: BPMN!StartEvent
	to
		out_start: SimplifiedBPMN!StartEvent (
			name <- in_start.name,
			outgoing <- in_start.outgoing,
			incoming <- in_start.incoming
		)
}

rule MessageCatchEvent2IntermediateCatchEvent {
	from
		in_event: BPMN!IntermediateCatchEvent (in_event.eventDefinitions->size() = 1 and in_event.eventDefinitions->first().oclIsTypeOf(BPMN!MessageEventDefinition))
	to
		out_event: SimplifiedBPMN!IntermediateCatchEvent(
			name <- in_event.name,
			outgoing <- in_event.outgoing,
			eventType <- #Message
		)
}

rule SignalCatchEvent2IntermediateCatchEvent {
	from
		in_event: BPMN!IntermediateCatchEvent (in_event.eventDefinitions->size() = 1 and in_event.eventDefinitions->first().oclIsTypeOf(BPMN!SignalEventDefinition))
	to
		out_event: SimplifiedBPMN!IntermediateCatchEvent(
			name <- in_event.name,
			outgoing <- in_event.outgoing,
			eventType <- #Signal
		)
}

rule MessageThrowEvent2IntermediateThrowEvent {
	from
		in_event: BPMN!IntermediateThrowEvent (in_event.eventDefinitions->size() = 1 and in_event.eventDefinitions->first().oclIsTypeOf(BPMN!MessageEventDefinition))
	to
		out_event: SimplifiedBPMN!IntermediateThrowEvent(
			name <- in_event.name,
			outgoing <- in_event.outgoing,
			eventType <- #Message
		)
}

rule SignalThrowEvent2IntermediateThrowEvent {
	from
		in_event: BPMN!IntermediateThrowEvent (in_event.eventDefinitions->size() = 1 and in_event.eventDefinitions->first().oclIsTypeOf(BPMN!SignalEventDefinition))
	to
		out_event: SimplifiedBPMN!IntermediateThrowEvent(
			name <- in_event.name,
			outgoing <- in_event.outgoing,
			eventType <- #Signal
		)
}

rule MessageBoundaryEvent2MessageBoundaryEvent {
	from
		in_event: BPMN!BoundaryEvent (in_event.eventDefinitions->size() = 1 and in_event.eventDefinitions->first().oclIsTypeOf(BPMN!MessageEventDefinition))
	to
		out_event: SimplifiedBPMN!BoundaryEvent (
			name <- in_event.name,
			eventType <- #Message,
			cancelActivity <- in_event.cancelActivity,
			attachedToRef <- in_event.attachedToRef
			)
}

rule SignalBoundaryEvent2MessageBoundaryEvent {
	from
		in_event: BPMN!BoundaryEvent (in_event.eventDefinitions->size() = 1 and in_event.eventDefinitions->first().oclIsTypeOf(BPMN!SignalEventDefinition))
	to
		out_event: SimplifiedBPMN!BoundaryEvent (
			name <- in_event.name,
			eventType <- #Signal,
			cancelActivity <- in_event.cancelActivity,
			attachedToRef <- in_event.attachedToRef
			)
}

rule EndEvent2EndEvent {
	from
		in_start: BPMN!EndEvent
	to
		out_start: SimplifiedBPMN!EndEvent (
			name <- in_start.name,
			outgoing <- in_start.outgoing,
			incoming <- in_start.incoming
		)
}

rule CallActivity2Subprocess {
	from
		in_call_activity: BPMN!CallActivity(not in_call_activity.calledElementRef.oclIsUndefined)
	to
		out_subprocess: SimplifiedBPMN!Subprocess (
			processRef <- in_call_activity.calledElementRef
		)
}

rule CallActivity2Subroutine {
	from
		in_call_activity: BPMN!CallActivity (in_call_activity.calledElementRef.oclIsUndefined)
	to
		out_subprocess: SimplifiedBPMN!Subprocess (
			processRef <- in_call_activity.refImmediateComposite()
		)
}